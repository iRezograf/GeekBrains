; / –ó–∞–¥–∞—á–∞ 46: –ó–∞–¥–∞–π—Ç–µ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–æ–º m√ón, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.
; // m = 3, n = 4.
; // 1 4 8 19
; // 5 -2 33 -2
; // 77 3 8 1

; Console.Write("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –º–∞—Å—Å–∏–≤–∞: ");
; int rows = int.Parse(Console.ReadLine());

; Console.Write("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –º–∞—Å—Å–∏–≤–∞: ");
; int columns = int.Parse(Console.ReadLine());

; int[,] array = GetArray(rows, columns, 0, 9);
; PrintArray(array);

; int[,] GetArray(int m, int n, int minValue, int maxValue)
; {
;     int[,] result = new int[m, n];
;     for (int i = 0; i < m; i++)
;     {
;         for (int j = 0; j < n; j++)
;         {
;             result[i, j] = new Random().Next(minValue, maxValue + 1);
;         }
;     }
;     return result;
; }

; void PrintArray(int[,] inArray)
; {
;     for (int i = 0; i < inArray.GetLength(0); i++)
;     {
;         for (int j = 0; j < inArray.GetLength(1) ; j++)
;         {
;             Console.Write($"{inArray[i,j]} ");
;         }
;         Console.WriteLine();
;     }
    
; }
; –ü–∞–≤–ª–æ–≤–î–º–∏—Ç—Ä–∏–π to Everyone (20:31)
; –≤–æ–æ–±—â–µ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö IDE –º–æ–∂–Ω–æ –¥–ª—è –º–µ—Ç–æ–¥–∞ —Å–¥–µ–ª–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –∏ –¥–ª—è —á–µ–≥–æ, –∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏—é –∫ –º–µ—Ç–æ–¥—É —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—Å–ø–ª—ã–≤–∞—Ç—å
; –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ to Everyone (20:32)
; —Ç—ã—ã—ã—Ä–∏–º
; –ù–∞–≥–∏–±–∞—Ç–æ—Ä to Everyone (20:32)
; —á–µ–º –ø—Ä–æ—â–µ , —Ç–µ–º –ª—É—á—à–µ
; –≠–ª—å–≤–∏—Ä–∞ to Everyone (20:36)
; –ó–∞–¥–∞—á–∞ 48: –ó–∞–¥–∞–π—Ç–µ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–∞ m –Ω–∞ n, –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ: A‚Çò‚Çô = m+n. –í—ã–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–∞ —ç–∫—Ä–∞–Ω.
; m = 3, n = 4.
; 0 1 2 3
; 1 2 3 4
; 2 3 4 5
; –ó–∞–¥–∞—á–∞ 49: –ó–∞–¥–∞–π—Ç–µ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤. –ù–∞–π–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ–±–∞ –∏–Ω–¥–µ–∫—Å–∞ —á—ë—Ç–Ω—ã–µ, –∏ –∑–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –∏—Ö –∫–≤–∞–¥—Ä–∞—Ç—ã.
; –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ to Everyone (20:38)
; –ù–∞ 4
; üòÅ
; –°–µ—Ä–≥–µ–π –ë–∞—Ä to Everyone (20:42)
; —è —Ç—É—Ç, –Ω–æ –≤—Å–µ –µ—â–µ –±–µ–∑ –≥–æ–ª–æ—Å–∞
; –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ to Everyone (21:16)
; int columns = Math.Abs(int.Parse(Console.ReadLine() ?? string.Empty));
; Aleksei Vasilev to Everyone (21:17)
; –û—Ç –†–∞—Ñ–∞—ç–ª—è –±—ã –µ—â–µ –µ–≥–æ –º–µ—Ç–æ–¥ –ø–µ—á–∞—Ç–∏ –º–∞—Å–∏–≤–∞ (—Ç–∞–º –≥–¥–µ —É–¥–∞–ª—è–µ—Ç—Å—è –∑–∞–ø—è—Ç–∞—è).
; BestCat to Everyone (21:18)
; —Å–∫–∏–Ω—å—Ç–µ, –ø–ª–∏–∑)
; –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ to Everyone (21:19)
; —â–∞
; –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ to Everyone (21:19)
; Console.Clear();
; Console.Write("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –º–∞—Å—Å–∏–≤–∞: ");
; int rows = int.Parse(Console.ReadLine());

; Console.Write("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –º–∞—Å—Å–∏–≤–∞: ");
; int columns = int.Parse(Console.ReadLine());

; int[,] array = GetArray(rows, columns, 0, 9);
; PrintArray(array);

; Console.WriteLine();
; int[,] processedArray = ProcessArray(array);
; PrintArray(processedArray);

; int[,] GetArray(int m, int n, int minValue, int maxValue)
; {
;     int[,] result = new int[m, n];
;     for (int i = 0; i < m; i++)
;     {
;         for (int j = 0; j < n; j++)
;         {
;             result[i, j] = new Random().Next(minValue, maxValue + 1);
;         }
;     }
;     return result;
; }
; –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ to Everyone (21:19)
; int[,] ProcessArray(int[,] intArray)
; {
;     int m = intArray.GetLength(0);
;     int n = intArray.GetLength(1);

;     for (int i = 0; i < m; i++)
;     {
;         for (int j = 0; j < n; j++)
;         {
;             if (i%2==0 && j%2==0)
;             {
;                 intArray[i, j] = intArray[i, j]*intArray[i, j];
;             }
;         }
;     }
;     return intArray;
; }

; void PrintArray(int[,] inArray)
; {
;     for (int i = 0; i < inArray.GetLength(0); i++)
;     {
;         for (int j = 0; j < inArray.GetLength(1); j++)
;         {
;             Console.Write($"{inArray[i, j]} ");
;         }
;         Console.WriteLine();
;     }
; }
